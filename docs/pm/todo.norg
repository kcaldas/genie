@document.meta
title: Genie Development Todo List
description: Prioritized tasks and action items for Genie development
authors: genie
categories: [project-management, todo, development]
created: 2024-06-21
updated: 2024-06-21
version: 1.0.0
@end

* Genie Development Todo List
  /Actionable tasks prioritized for development/

** High Priority
   /Critical items that should be tackled first/

   - [ ] Enable View Context on TUI - Add /context command to view and manage context
         *New requirement from user - first context management priority*
         *Feasibility: High | Size: S | Priority: Very High*
         - Implement /context slash command in TUI
         - Support viewing current context state (/context view)
         - Support clearing context (/context clean)
         - Show context size, structure, and content
         - Essential for debugging and understanding AI's context
         - Foundation for all other context management features

   - [ ] Context Management for Tool Results - Smart positioning and deduplication
         *Source: ideas.norg - Inbox*
         *Feasibility: High | Size: M | Priority: High*
         - When reading files, move result to front of context
         - If same file read before, replace old result instead of appending
         - Implement LRU-style context management for tool results
         - Prevents context bloat from repeated file reads
         - Part of larger Intelligent Context Management System

   - [ ] Todo List as Default Front Context - Keep todo list always at front
         *Source: ideas.norg - Inbox*
         *Feasibility: High | Size: S | Priority: High*
         - Todo list always maintains front position in context
         - Each todo consultation refreshes its position
         - Ensures AI always aware of current tasks and priorities
         - Simple but effective context organization
         - Complements todo list as AI tool idea

   - [ ] Separate Instruction vs Text Context - Distinguish context types
         *Source: ideas.norg - Inbox*
         *Feasibility: High | Size: L | Priority: High*
         - Instruction context: System prompts, CLAUDE.md, persona rules
         - Text context: Conversation history, tool results, project data
         - Different management strategies for each type
         - Instructions stable at top, text context dynamic
         - Enables more precise context control

   - [ ] LLM Memory Capability - Allow LLM to return memory entries
         *Source: ideas.norg - Inbox*
         *Feasibility: High | Size: M | Priority: High*
         - LLM can include memory entries in response metadata
         - System stores these memories for future sessions
         - LLM decides what's worth remembering
         - Retrieved memories added to context in future
         - Enables persistent learning across sessions

   - [ ] Working Directory Concept Documentation - Define Genie's working directory model
         *Source: ideas.norg - moved from ideas to actionable documentation task*
         *Feasibility: High | Size: S | Priority: High*
         - Document clear concept of working directory for Genie
         - How it relates to project root vs current directory
         - Impact on tool operations and file access
         - Configuration options for working directory behavior
         - Essential for user understanding and safety
         - Create clear documentation in CLAUDE.md or separate docs

   - [ ] Chain Step Progress Messages - Real-time progress feedback during chain execution
         *New requirement from user*
         *Feasibility: High | Size: M | Priority: High*
         - Add intermediate progress events for each chain step execution
         - Different from tool execution events and final chain responses
         - Enable steps to send brief status updates to frontend (e.g., "Analyzing clarity...", "Generating response...")
         - Show users what's happening during long-running chain operations
         - Improve perceived performance and user engagement
         - Foundation for progress bars and step-by-step execution visualization

   - [ ] Initial Prompt & Context Loading System - Fix cold start and improve first interaction
         *New requirement from user - systematic prompt improvement*
         *Feasibility: High | Size: L | Priority: High*
         - Phase 1: Fix clarity analysis to recognize basic project questions (Size: S)
         - Phase 2: Add tools to clarifying_questions.yaml for intelligent clarification (Size: M)
         - Phase 3: Implement automatic GENIE.md loading like Claude Code (Size: L)
         - Phase 4: Add project analysis step for comprehensive understanding (Size: L)
         - Fixes issue where "What is this project about?" doesn't work initially
         - Enables intelligent help from first interaction without manual context loading

   - [ ] Enhanced File Writing Tools - Better file creation and modification capabilities
         *New requirement from user*
         *Feasibility: High | Size: M | Priority: High*
         - Create dedicated file writing tools beyond basic Write
         - Support templates and structured file generation
         - Add file creation with directory structure support
         - Integrate with theming system for consistent output
         - Better error handling and validation

   - [ ] Genie Theming Foundation - Create theming system for Genie
         *New requirement from user*
         *Feasibility: High | Size: M | Priority: High*
         - Design theme structure and configuration format
         - Create base theme and example variations
         - Support themed Genie instances (Home, Student, Developer, etc.)
         - Theme-aware file generation and output formatting
         - Foundation for "Company of One" campaign with themed demos

** Medium Priority
   /Important items for near-term development/

   - [ ] Todo List as AI Tool - Make todo list accessible as tool
         *Source: ideas.norg - Inbox*
         *Feasibility: High | Size: M | Priority: Medium*
         - Create todo_manager tool that wraps existing session manager
         - Allow AI to read, update, and track todos during execution
         - Integrate with existing session management system
         - Benefits: Better task tracking, autonomous workflow management
         - Natural extension of Plan-Todo-Execute Engine concept

   - [ ] Context Positioning Strategy - Smart placement for new entries
         *Source: ideas.norg - Inbox*
         *Feasibility: Medium | Size: M | Priority: Medium*
         - Context manager analyzes entry type and relevance
         - Automatically positions entries based on importance
         - Considers: recency, relevance, entry type, current task
         - More sophisticated than simple append or prepend
         - Foundation for advanced context management

   - [ ] Background Worker for Project Insights - Monitor conversations
         *Source: ideas.norg - Inbox*
         *Feasibility: Medium | Size: L | Priority: Medium*
         - Separate worker analyzes user-AI conversations
         - Extracts project patterns, conventions, architecture insights
         - Updates project knowledge base automatically
         - Runs asynchronously without blocking main flow
         - Feeds into Project-specific knowledge accumulation

   - [ ] Recent Conversation in Instruction Set - Configurable message window
         *Source: ideas.norg - Inbox*
         *Feasibility: High | Size: S | Priority: Medium*
         - Configure how many recent messages to keep in context
         - Different settings per persona or project
         - Helps manage token usage efficiently
         - Simple sliding window implementation
         - User-configurable through settings

   - [ ] MCP Integration - Use Claude Code MCP/SDK as tool
         *Source: ideas.norg - Core Features & Tools*
         *Feasibility: High | Size: M | Priority: Medium*
         - Implement MCP client in tools package
         - Parse .mcp.json configs
         - Handle stdio/HTTP transports
         - Strategic for dogfooding and tool development

   - [ ] Create Marketing Ideas Document - Central hub for promotion
         *Source: ideas.norg - Public Presence & Marketing*
         *Feasibility: High | Size: S | Priority: Medium*
         - Create docs/marketing/ folder structure
         - Ideas collection document
         - Platform-specific strategies
         - Content calendar template

** Low Priority
   /Nice-to-have items for future consideration/

   - [ ] Self-documenting Genie - Automated changelog generation
         *Source: ideas.norg - Public Presence & Marketing*
         *Feasibility: High | Size: M | Priority: Low*
         - Daily GitHub Action using Genie to analyze commits
         - Generate human-readable changelog entries
         - "Genie documenting Genie" demonstration
         - Publish to website/docs automatically

** Completed
   /Finished tasks for reference/

   - [x] Service layer abstraction - Decouple UI from business logic with unified interface
         *Source: ideas.norg - Platform Strategy*
         - Created abstraction layer between UI and core services
         - Terminal UI now calls service layer instead of directly calling chains/pkg services
         - Supports both synchronous and asynchronous communication patterns
         - Integrated with existing bus system for async operations
         - Enables adding web UI, REST API, and other interfaces later
         - Clear separation: UI layer ↔ Service layer ↔ Business logic layer

   - [x] Interactive Tool System - Bidirectional tool-UI communication foundation
         *Source: ideas.norg - AI & Prompting System*
         - Implemented execution ID system for request-response matching
         - Created ToolConfirmationRequest/Response events for bidirectional communication
         - Enhanced BashTool with optional confirmation for all commands (configurable)
         - Added TUI confirmation dialog handling with clean user prompts
         - Tools can now ask questions and wait for user responses indefinitely
         - Foundation established for extending to other interactive tool types
         - Event-driven architecture supports future web/mobile frontends

   - [x] Chain Decision Nodes - Add controlled branching to chain system
         *Source: ideas.norg - Core Features & Tools*
         *Feasibility: Very High | Size: S | Priority: High*
         - ✅ Implemented DecisionStep type for decisions in chain execution
         - ✅ Added conditional logic in chain.Run() for branching with executeDecisionStep
         - ✅ Enabled structured workflows with specific decision paths (CLEAR/UNCLEAR, etc.)
         - ✅ Built dynamic decision matching with findBestMatch function for robust choice handling
         - ✅ Added comprehensive unit tests for decision matching edge cases
         - ✅ Implemented loop prevention (max 3 executions per decision step)
         - ✅ Support for hybrid approach: constrained decision paths + tool freedom in chosen chains
         - ✅ Successfully deployed in clarity decision system with simplified single-step flow

** Notes
   /Guidelines for managing this todo list/

   - Use `- [ ]` for pending tasks and `- [x]` for completed ones
   - Tasks can be moved from ideas.norg when they become actionable
   - Include brief context and acceptance criteria for each task
   - Review and reprioritize regularly as development progresses
   - Move completed tasks to the Completed section rather than deleting them
