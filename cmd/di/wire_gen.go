// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/google/wire"
	"github.com/kcaldas/genie/cmd/events"
	"github.com/kcaldas/genie/cmd/tui"
	"github.com/kcaldas/genie/internal/di"
	"github.com/kcaldas/genie/pkg/genie"
)

// Injectors from wire.go:

// InjectCommandEventBus is a wire injector function
func InjectCommandEventBus() *events.CommandEventBus {
	eventsCommandEventBus := ProvideCommandEventBus()
	return eventsCommandEventBus
}

// InjectApp is a wire injector function for creating App with dependencies
func InjectApp(genieService genie.Genie, session *genie.Session) (*tui.App, error) {
	eventsCommandEventBus := ProvideCommandEventBus()
	app, err := ProvideApp(genieService, session, eventsCommandEventBus)
	if err != nil {
		return nil, err
	}
	return app, nil
}

// InjectTUI is a wire injector function for creating TUI with dependencies
func InjectTUI(session *genie.Session) (*tui.TUI, error) {
	genieGenie, err := ProvideGenie()
	if err != nil {
		return nil, err
	}
	eventsCommandEventBus := ProvideCommandEventBus()
	app, err := ProvideApp(genieGenie, session, eventsCommandEventBus)
	if err != nil {
		return nil, err
	}
	tuiTUI := ProvideTUI(app)
	return tuiTUI, nil
}

// wire.go:

// Shared command event bus instance
var commandEventBus = events.NewCommandEventBus()

// Shared genie instance (singleton)
var genieInstance genie.Genie

var genieError error

var genieInitialized bool

// ProvideCommandEventBus provides a shared command event bus instance
func ProvideCommandEventBus() *events.CommandEventBus {
	return commandEventBus
}

// ProvideGenie provides a shared Genie singleton instance
func ProvideGenie() (genie.Genie, error) {
	if !genieInitialized {
		genieInstance, genieError = di.ProvideGenie()
		genieInitialized = true
	}
	return genieInstance, genieError
}

// Wire set for shared command infrastructure
var CommandWireSet = wire.NewSet(
	ProvideCommandEventBus,
)

// ProvideApp provides an App instance with injected dependencies
func ProvideApp(genieService genie.Genie, session *genie.Session, commandEventBus2 *events.CommandEventBus) (*tui.App, error) {
	return tui.NewApp(genieService, session, commandEventBus2)
}

// ProvideTUI provides a TUI instance with injected App
func ProvideTUI(app *tui.App) *tui.TUI {
	return tui.New(app)
}
