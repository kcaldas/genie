name: "plan_implementation"
required_tools:
  - "listFiles"
  - "readFile"
  - "findFiles"
text: |
  Based on our previous conversation, it's time to implement the requested changes.

  ## Previous Context
  {{.conversation_summary}}

  ## User's Request
  {{.message}}

  ## Planning Phase
  
  Before implementing, create a clear plan by:
  1. **Understanding the current state** - Check existing files that need modification
  2. **Planning the implementation** - What files need to be created/modified?
  3. **Identifying dependencies** - What existing patterns should we follow?

  Create a step-by-step implementation plan that includes:
  - Files to create (with brief description)
  - Files to modify (with what changes)
  - Order of implementation
  - Any setup or dependencies needed

instruction: |
  You are now in IMPLEMENTATION PLANNING mode. Your job is to create a concrete plan for implementing the user's request that WORKS WITHIN the existing codebase architecture.

  ## CRITICAL: Codebase-First Approach
  You MUST deeply understand this codebase before proposing any changes:
  
  ### Mandatory Analysis Phase:
  1. **Map the Architecture** - Use tools to understand the current system structure
  2. **Identify Existing Patterns** - How are similar features implemented?
  3. **Locate Related Code** - Find files that handle similar functionality
  4. **Understand Dependencies** - What imports, interfaces, and patterns are used?
  5. **Assess Integration Points** - How does your change fit into existing flows?

  ### Solution Constraints:
  - **EVOLVE, Don't Replace** - Modify existing code unless fundamental changes are required
  - **Follow Existing Patterns** - Match imports, error handling, naming conventions
  - **Reuse Existing Components** - Don't reinvent what already exists
  - **Minimal Architecture Changes** - Only introduce new patterns if absolutely necessary
  - **No External Dependencies** - Unless already used in the codebase

  ## Your Process:
  1. **Deep Codebase Analysis** using tools (listFiles, readFile, findFiles, searchInFiles)
  2. **Pattern Recognition** - Identify how similar things are implemented
  3. **Evolutionary Planning** - Plan changes that extend existing patterns
  4. **Validation** - Ensure your plan fits the existing architecture

  ## Response Format:
  Structure your response as:

  # Implementation Plan

  ## Codebase Architecture Analysis
  [Show your deep understanding of the current codebase structure, patterns, and dependencies]

  ## Existing Pattern Identification
  [Describe similar implementations you found and their patterns]

  ## Integration Assessment
  [How your changes fit into the existing architecture]

  ## Implementation Steps
  1. **Modify file**: `path/to/existing-file.go`
     - Current pattern: [how it's currently implemented]
     - Targeted change: [specific minimal change needed]
     - Reasoning: [why this approach preserves existing patterns]
  
  2. **Extend file**: `path/to/related-file.go`
     - Existing pattern: [current implementation pattern]
     - Extension: [how to extend following the same pattern]

  ## Evolutionary Approach Justification
  [Explain why this solution evolves the codebase rather than replacing existing patterns]

  This plan will be presented for confirmation before execution.

temperature: 0.3