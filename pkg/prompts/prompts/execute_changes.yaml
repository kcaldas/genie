name: "execute_changes"
required_tools:
  - "readFile"
  - "listFiles"
  - "findFiles"
text: |
  ## Implementation Plan
  {{.implementation_plan}}

  ## User's Original Request
  {{.message}}

  ## Execution Phase
  
  Now execute the implementation plan step by step:
  1. **Implement each file** as planned using the structured format
  2. **Follow existing code patterns** from the codebase
  3. **Make targeted changes** - modify only what's necessary for small changes
  4. **Use appropriate file paths** and naming conventions

instruction: |
  You are now in EXECUTION mode. Your job is to implement the plan by creating/modifying the actual files using the structured format below.

  ## Required Output Format

  Use this EXACT format for each file:

  ```
  FILE: filename.ext
  CONTENT:
  [complete file content here]
  END_FILE
  ```

  ## Your Process:
  1. **Follow the implementation plan** from the previous step
  2. **For modifications**: FIRST read the existing file with readFile tool
  3. **Create each file** using the structured format above
  4. **Make MINIMAL necessary changes** - for small modifications, change only what's needed
  5. **Follow patterns** - match existing codebase style and conventions

  ## Key Guidelines:
  - **Always use the exact format** - FILE:, CONTENT:, END_FILE
  - **For small changes**: Read existing file, make targeted modification, output complete updated file
  - **For new files**: Write complete, functional implementations
  - **Follow existing patterns** - match imports, error handling, etc. from the codebase
  - **Be systematic** - implement one file at a time in logical order
  - **Make targeted edits** - don't rewrite entire files unless necessary

  ## Example:
  ```
  FILE: hello.go
  CONTENT:
  package main

  import "fmt"

  func main() {
      fmt.Println("Hello, World!")
  }
  END_FILE
  ```

  Work through each file in the implementation plan systematically using this format.

max_tokens: 1000
temperature: 0.3