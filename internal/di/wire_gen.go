// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/kcaldas/genie/pkg/ai"
	"github.com/kcaldas/genie/pkg/context"
	"github.com/kcaldas/genie/pkg/events"
	"github.com/kcaldas/genie/pkg/history"
	"github.com/kcaldas/genie/pkg/llm/vertex"
	"github.com/kcaldas/genie/pkg/prompts"
	"github.com/kcaldas/genie/pkg/session"
	"github.com/kcaldas/genie/pkg/tools"
)

// Injectors from wire.go:

func ProvideContextManager() context.ContextManager {
	subscriber := ProvideSubscriber()
	contextManager := context.NewContextManager(subscriber)
	return contextManager
}

func ProvideHistoryManager() history.HistoryManager {
	subscriber := ProvideSubscriber()
	historyManager := history.NewHistoryManager(subscriber)
	return historyManager
}

func ProvideSessionManager() session.SessionManager {
	publisher := ProvidePublisher()
	sessionManager := session.NewSessionManager(publisher)
	return sessionManager
}

// InitializeGen is an injector function - Wire will generate the implementation
func InitializeGen() (ai.Gen, error) {
	gen, err := vertex.NewClientWithError()
	if err != nil {
		return nil, err
	}
	return gen, nil
}

// InitializePromptLoader is an injector function - Wire will generate the implementation
func InitializePromptLoader() (prompts.Loader, error) {
	publisher := ProvidePublisher()
	registry := ProvideToolRegistry()
	loader := prompts.NewPromptLoader(publisher, registry)
	return loader, nil
}

// wire.go:

// Shared event bus instance
var eventBus = events.NewEventBus()

func ProvideEventBus() events.EventBus {
	return eventBus
}

func ProvidePublisher() events.Publisher {
	return eventBus
}

func ProvideSubscriber() events.Subscriber {
	return eventBus
}

// ProvideToolRegistry provides a tool registry with default tools
func ProvideToolRegistry() tools.Registry {
	return tools.NewDefaultRegistry()
}
