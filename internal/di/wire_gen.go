// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/kcaldas/genie/pkg/ai"
	"github.com/kcaldas/genie/pkg/config"
	"github.com/kcaldas/genie/pkg/ctx"
	"github.com/kcaldas/genie/pkg/events"
	"github.com/kcaldas/genie/pkg/genie"
	"github.com/kcaldas/genie/pkg/handlers"
	"github.com/kcaldas/genie/pkg/llm/genai"
	"github.com/kcaldas/genie/pkg/prompts"
	"github.com/kcaldas/genie/pkg/session"
	"github.com/kcaldas/genie/pkg/tools"
)

// Injectors from wire.go:

// ProvideToolRegistry provides a tool registry with interactive tools
func ProvideToolRegistry() tools.Registry {
	eventsEventBus := ProvideEventBus()
	registry := tools.NewDefaultRegistry(eventsEventBus)
	return registry
}

// ProvideOutputFormatter provides a tool output formatter
func ProvideOutputFormatter() tools.OutputFormatter {
	registry := ProvideToolRegistry()
	outputFormatter := tools.NewOutputFormatter(registry)
	return outputFormatter
}

// ProvideHandlerRegistry provides a handler registry with default handlers
func ProvideHandlerRegistry() ai.HandlerRegistry {
	eventsEventBus := ProvideEventBus()
	handlerRegistry := handlers.NewDefaultHandlerRegistry(eventsEventBus)
	return handlerRegistry
}

func ProvideProjectCtxManager() ctx.ProjectContextPartProvider {
	subscriber := ProvideSubscriber()
	projectContextPartProvider := ctx.NewProjectCtxManager(subscriber)
	return projectContextPartProvider
}

func ProvideChatCtxManager() ctx.ChatContextPartProvider {
	eventsEventBus := ProvideEventBus()
	chatContextPartProvider := ctx.NewChatCtxManager(eventsEventBus)
	return chatContextPartProvider
}

func ProvideFileContextPartsProvider() *ctx.FileContextPartsProvider {
	eventsEventBus := ProvideEventBus()
	fileContextPartsProvider := ctx.NewFileContextPartsProvider(eventsEventBus)
	return fileContextPartsProvider
}

func ProvideContextManager() ctx.ContextManager {
	contextPartProviderRegistry := ProvideContextRegistry()
	contextManager := ctx.NewContextManager(contextPartProviderRegistry)
	return contextManager
}

func ProvideSessionManager() session.SessionManager {
	publisher := ProvidePublisher()
	sessionManager := session.NewSessionManager(publisher)
	return sessionManager
}

// ProvideGen is an injector function - Wire will generate the implementation
func ProvideGen() (ai.Gen, error) {
	gen, err := ProvideAIGenWithCapture()
	if err != nil {
		return nil, err
	}
	return gen, nil
}

// ProvidePromptLoader is an injector function - Wire will generate the implementation
func ProvidePromptLoader() (prompts.Loader, error) {
	publisher := ProvidePublisher()
	registry := ProvideToolRegistry()
	loader := prompts.NewPromptLoader(publisher, registry)
	return loader, nil
}

// ProvideChainFactory provides the chain factory based on environment configuration
func ProvideChainFactory() (genie.ChainFactory, error) {
	loader, err := ProvidePromptLoader()
	if err != nil {
		return nil, err
	}
	chainFactory := genie.NewSimpleChainFactory(loader)
	return chainFactory, nil
}

// ProviderChainRunner provides the chain runner
func ProvideChainRunner() (genie.ChainRunner, error) {
	gen, err := ProvideGen()
	if err != nil {
		return nil, err
	}
	handlerRegistry := ProvideHandlerRegistry()
	bool2 := _wireBoolValue
	chainRunner := genie.NewDefaultChainRunner(gen, handlerRegistry, bool2)
	return chainRunner, nil
}

var (
	_wireBoolValue = false
)

// ProvideGenie provides a complete Genie instance using Wire
func ProvideGenie() (genie.Genie, error) {
	chainRunner, err := ProvideChainRunner()
	if err != nil {
		return nil, err
	}
	sessionManager := ProvideSessionManager()
	contextManager := ProvideContextManager()
	eventsEventBus := ProvideEventBus()
	outputFormatter := ProvideOutputFormatter()
	chainFactory, err := ProvideChainFactory()
	if err != nil {
		return nil, err
	}
	manager := ProvideConfigManager()
	genieGenie := genie.NewGenie(chainRunner, sessionManager, contextManager, eventsEventBus, outputFormatter, chainFactory, manager)
	return genieGenie, nil
}

// wire.go:

// Shared event bus instance
var eventBus = events.NewEventBus()

func ProvideEventBus() events.EventBus {
	return eventBus
}

func ProvidePublisher() events.Publisher {
	return eventBus
}

func ProvideSubscriber() events.Subscriber {
	return eventBus
}

func ProvideContextRegistry() *ctx.ContextPartProviderRegistry {

	registry := ctx.NewContextPartProviderRegistry()

	projectManager := ProvideProjectCtxManager()
	chatManager := ProvideChatCtxManager()
	fileProvider := ProvideFileContextPartsProvider()

	registry.Register(projectManager)
	registry.Register(chatManager)
	registry.Register(fileProvider)

	return registry
}

// ProvideAIGenWithCapture creates the AI Gen with optional capture middleware
func ProvideAIGenWithCapture() (ai.Gen, error) {

	baseGen, err := genai.NewClient()
	if err != nil {
		return nil, err
	}

	config := ai.GetCaptureConfigFromEnv("genai")

	if config.Enabled {
		return ai.NewCaptureMiddleware(baseGen, config), nil
	}

	return baseGen, nil
}

// ProvideConfigManager provides a configuration manager
func ProvideConfigManager() config.Manager {
	return config.NewConfigManager()
}
